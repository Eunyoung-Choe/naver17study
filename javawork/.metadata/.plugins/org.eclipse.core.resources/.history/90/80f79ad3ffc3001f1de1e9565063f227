package day1227;


//System.out.println("Stop");
loop=false;
}

//Thread 의 run 메소드 호출
//인터페이스 Runnable 을 구현했으므로 Thread 생성자에 현재클래스의 인스턴스를 보낸다
Thread th=new Thread(draw);
th.start();//run 메소드 호출
}



//캔바스 내부클래스
class MyDraw extends Canvas implements Runnable
{
@Override
public void paint(Graphics g) {
// TODO Auto-generated method stub
//super.paint(g);
//System.out.println("paint");			
if(loop) {
	g.setColor(drawColor);
	g.fillOval(xpos, ypos, 60, 60);
}	
}

@Override
public void run() {
// TODO Auto-generated method stub
System.out.println("원그리기");
if(draw==null)
	return;
while(loop)
{
	//랜덤 색상 구하기
	int r=(int)(Math.random()*256);//0~255
	int g=(int)(Math.random()*256);//0~255
	int b=(int)(Math.random()*256);//0~255
	
	drawColor=new Color(r, g, b);
	
	//랜덤하게 x좌표,y좌표도 구한다
	xpos=(int)(Math.random()*450);
	ypos=(int)(Math.random()*450);
	
	//캔바스의 paint 메소드 호출				
	this.paint(getGraphics());
	
	try {
		Thread.sleep(300);//1000 이 1초
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}
}
}

public void initDesign()
{
//캔바스를 센타에 배치
this.add("Center",draw);

JPanel p=new JPanel();
btnStart=new JButton("스레드 시작");
btnStop=new JButton("스레드 멈춤");

p.add(btnStart);
p.add(btnStop);

this.add("North",p);
this.add("Center",draw);

//버튼 이벤트
btnStart.addActionListener(this);
btnStop.addActionListener(this);//this:actionPerformed 메서드를 구현한 클래스의 인스턴스를 보낸다
}

public static void main(String[] args) {
// TODO Auto-generated method stub
Ex3_ThreadSwingCanvas a=new Ex3_ThreadSwingCanvas("스레드예제");
//Thread th=new Thread(a);
//th.start();		
}

}
